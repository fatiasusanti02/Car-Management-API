{
    "swagger": "2.0",
    "info": {
        "description": "FSW-Challenge-6",
        "version": "1.0.0",
        "title": "Binar Car Rental",
        "contact": {
            "email": "hidayahtria.ananda@gmail.com "
        }
    },
    "basePath": "/v2",
    "tags": [{
            "name": "car",
            "description": "Car Rental in one place"
        },
        {
            "name": "user",
            "description": "Operations about user"
        }
    ],
    "schemes": [
        "http"
    ],
    "paths": {
        "/api/cars": {
            "post": {
                "tags": [
                    "car"
                ],
                "summary": "Add new car",
                "description": "",
                "operationId": "addCar",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "Car object that needs to be added to the store",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Car"
                    }
                }],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [{
                    "api_key": []
                }]
            }
        },
        "/api/cars/{carId}": {
            "get": {
                "tags": [
                    "car"
                ],
                "summary": "Find car by ID",
                "description": "Returns a single car",
                "operationId": "getPetById",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [{
                    "name": "carId",
                    "in": "path",
                    "description": "ID of car to return",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Car"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Car not found"
                    }
                },
                "security": [{
                    "api_key": []
                }]
            },
            "put": {
                "tags": [
                    "car"
                ],
                "summary": "Updates a car in the store with form data",
                "description": "",
                "operationId": "updatePetWithForm",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                        "name": "carId",
                        "in": "path",
                        "description": "ID of car that needs to be updated",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "name",
                        "in": "formData",
                        "description": "Updated name of the car",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sewa",
                        "in": "formData",
                        "description": "Updated status of the car",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ukuran",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "image",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [{
                    "api_key": []
                }]
            },
            "delete": {
                "tags": [
                    "car"
                ],
                "summary": "Deletes a car",
                "description": "",
                "operationId": "deletePet",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [{
                        "name": "api_key",
                        "in": "header",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "carId",
                        "in": "path",
                        "description": "Car id to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Car not found"
                    }
                },
                "security": [{
                    "api_key": []
                }]
            }
        },
        "/car/bringback/{carId}": {
            "get": {
                "tags": [
                    "car"
                ],
                "summary": "Bringback Softdeleted Car entries",
                "description": "Returns a single car",
                "operationId": "getCarById",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "carId",
                    "in": "path",
                    "description": "ID of car to return",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Car"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Car not found"
                    }
                },
                "security": [{
                    "api_key": []
                }]
            }
        },
        "/api/user/register": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Register user",
                "description": "Create a new user",
                "operationId": "createUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "Created user object",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/User"
                    }
                }],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/registerAdmin": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Register admin",
                "description": "Create a new admin",
                "operationId": "createUserNew",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "Created user object",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/User"
                    }
                }],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/user/login": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Logs user into the system",
                "description": "",
                "operationId": "loginUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                        "name": "email",
                        "in": "query",
                        "description": "The user name for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "The password for login in clear text",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "X-Rate-Limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "calls per hour allowed by the user"
                            },
                            "X-Expires-After": {
                                "type": "string",
                                "format": "date-time",
                                "description": "date in UTC when token expires"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    }
                }
            }
        },
        "/user/data": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get current user",
                "description": "",
                "operationId": "getUserByTokenPayloa",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/api/user/{userId}": {
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUserId",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [{
                    "name": "userId",
                    "in": "path",
                    "description": "The name that needs to be deleted",
                    "required": true,
                    "type": "integer"
                }],
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/api/admin/{adminId}": {
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteAdminId",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [{
                    "name": "adminId",
                    "in": "path",
                    "description": "The name that needs to be deleted",
                    "required": true,
                    "type": "integer"
                }],
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "api_key": {
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
        }
    },
    "definitions": {
        "User": {
            "type": "object",
            "required": [
                "name",
                "email",
                "password",
                "userRoleId"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "userRoleId": {
                    "type": "integer"
                }
            }
        },
        "Car": {
            "type": "object",
            "required": [
                "nama",
                "sewa",
                "ukuran",
                "image"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "category": {
                    "$ref": "#/definitions/Category"
                },
                "nama": {
                    "type": "string",
                    "example": "Daihatsu"
                },
                "sewa": {
                    "type": "integer",
                    "xml": {
                        "name": "photoUrl",
                        "wrapped": true
                    },
                    "items": {
                        "type": "string"
                    }
                },
                "ukuran": {
                    "type": "string"
                },
                "image": {
                    "type": "string",
                    "description": "car status in the store",
                    "enum": [
                        "available",
                        "pending",
                        "sold"
                    ]
                }
            },
            "xml": {
                "name": "Car"
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    }
}